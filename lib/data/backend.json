{
  "roadmap_id": "backend",
  "title": "Backend Developer Roadmap",
  "description": "Learn backend development from basics to advanced concepts.",
  "$id": "67205d33001cb5e5e602",
  "$createdAt": "2024-10-29T03:57:42.330+00:00",
  "$updatedAt": "2024-10-29T03:57:42.330+00:00",
  "$permissions": [],
  "creator": null,
  "savedRoadmaps": [],
  "nodes": [
    {
      "nodeId": "backend_node001",
      "title": "Internet",
      "description": "The internet is a global network of interconnected computers that communicate using standardized protocols, primarily TCP/IP. When you request a webpage, your device sends a data packet through your internet service provider (ISP) to a DNS server, which translates the website’s domain name into an IP address. The packet is then routed across various networks (using routers and switches) to the destination server, which processes the request and sends back the response. This back-and-forth exchange enables the transfer of data like web pages, emails, and files, making the internet a dynamic, decentralized system for global communication.",
      "type": "checkpoint",
      "$id": "6723c82c0018fa24536d",
      "$createdAt": "2024-10-31T18:10:56.712+00:00",
      "$updatedAt": "2024-10-31T18:10:56.712+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node002",
      "title": "Backend Language",
      "description": "",
      "type": "checkpoint",
      "$id": "6723cb2e000962f9a1e9",
      "$createdAt": "2024-10-31T18:23:46.277+00:00",
      "$updatedAt": "2024-10-31T18:23:46.277+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node003",
      "title": "Version Control Systems\n",
      "description": "Version Control Systems (VCS) are tools that help developers track and manage changes to code over time. They allow multiple people to work on a project simultaneously, maintaining a history of modifications. Git is the most popular VCS, known for its distributed nature and branching model. Other systems include Subversion (SVN) and Mercurial. VCS enables features like branching for parallel development, merging to combine changes, and reverting to previous states. They facilitate collaboration through remote repositories, pull requests, and code reviews. VCS also provides backup and recovery capabilities, conflict resolution, and the ability to tag specific points in history. By maintaining a detailed record of changes and supporting non-linear development, VCS has become an essential tool in modern software development, enhancing productivity, code quality, and team collaboration.\n",
      "type": "checkpoint",
      "$id": "6723cba60006810de9d7",
      "$createdAt": "2024-10-31T18:25:46.302+00:00",
      "$updatedAt": "2024-10-31T18:25:46.302+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node004",
      "title": "Relational Databases",
      "description": "Relational databases are a type of database management system (DBMS) that organizes data into structured tables with rows and columns, using a schema to define data relationships and constraints. They employ Structured Query Language (SQL) for querying and managing data, supporting operations such as data retrieval, insertion, updating, and deletion. Relational databases enforce data integrity through keys (primary and foreign) and constraints (such as unique and not-null), and they are designed to handle complex queries, transactions, and data relationships efficiently. Examples of relational databases include MySQL, PostgreSQL, and Oracle Database. They are commonly used for applications requiring structured data storage, strong consistency, and complex querying capabilities.\n\n",
      "type": "checkpoint",
      "$id": "6723cbe0003bc1cb7ffd",
      "$createdAt": "2024-10-31T18:26:45.381+00:00",
      "$updatedAt": "2024-10-31T18:26:45.381+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node005",
      "title": "APIs",
      "description": "An API (Application Programming Interface) is a set of defined rules and protocols that allow different software applications to communicate and interact with each other. It provides a standardized way for developers to access and manipulate the functionalities or data of a service, application, or platform without needing to understand its internal workings. APIs can be public or private and are commonly used to integrate disparate systems, facilitate third-party development, and enable interoperability between applications. They typically include endpoints, request methods (like GET, POST, PUT), and data formats (like JSON or XML) to interact with.\n\n",
      "type": "checkpoint",
      "$id": "6723cc0900393866000b",
      "$createdAt": "2024-10-31T18:27:26.285+00:00",
      "$updatedAt": "2024-10-31T18:27:26.285+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node006",
      "title": "Web App Testing",
      "description": "Testing is a systematic process used to evaluate the functionality, performance, and quality of software or systems to ensure they meet specified requirements and standards. It involves various methodologies and levels, including unit testing (testing individual components), integration testing (verifying interactions between components), system testing (assessing the entire system’s behavior), and acceptance testing (confirming it meets user needs). Testing can be manual or automated and aims to identify defects, validate that features work as intended, and ensure the system performs reliably under different conditions. Effective testing is critical for delivering high-quality software and mitigating risks before deployment.\n\n",
      "type": "checkpoint",
      "$id": "6723cc47000e64dabaf1",
      "$createdAt": "2024-10-31T18:28:28.821+00:00",
      "$updatedAt": "2024-10-31T18:28:28.821+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node007",
      "title": "CI/CD",
      "description": "CI/CD (Continuous Integration/Continuous Delivery) is a set of practices and tools in software development that automate the process of building, testing, and deploying code changes. Continuous Integration involves frequently merging code changes into a central repository, where automated builds and tests are run. Continuous Delivery extends this by automatically deploying all code changes to a testing or staging environment after the build stage. Some implementations include Continuous Deployment, where changes are automatically released to production. CI/CD pipelines typically involve stages like code compilation, unit testing, integration testing, security scans, and deployment. This approach aims to improve software quality, reduce time to market, and increase development efficiency by catching and addressing issues early in the development cycle.\n\n",
      "type": "checkpoint",
      "$id": "6723cc6c003799cd398b",
      "$createdAt": "2024-10-31T18:29:05.100+00:00",
      "$updatedAt": "2024-10-31T18:29:05.100+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    },
    {
      "nodeId": "backend_node008",
      "title": "Containerization",
      "description": "Containerization, exemplified by Docker, uses a shared operating system kernel to create isolated environments (containers) for applications. Containers are lighter, start faster, and use fewer resources than VMs. They’re ideal for microservices architectures and rapid deployment.",
      "type": "checkpoint",
      "$id": "6723cccc0029783bd3b4",
      "$createdAt": "2024-10-31T18:30:41.343+00:00",
      "$updatedAt": "2024-10-31T18:30:41.343+00:00",
      "$permissions": [],
      "resources": [],
      "related_node": [],
      "$databaseId": "6713dc29002d5e960b6c",
      "$collectionId": "671c6f83001893b39c51"
    }
  ],
  "$databaseId": "6713dc29002d5e960b6c",
  "$collectionId": "671bcb29001b4971b4cc"
}